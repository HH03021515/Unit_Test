# 基础服务的根据ID查询车场信息及根据oid查询区域信息接口压测脚本
import random

from locust import task, TaskSet
from locust.contrib.fasthttp import FastHttpUser


class Basic_Service(TaskSet):

    def on_start(self):
        print('开始压测基础服务根据ID查询车场信息及根据oid查询区域信息接口。。。')

    @task(9)
    def search_parkingInfo(self):
        id = [1000024, 1000027, 1000028, 1000029, 1000030, 1000031, 1000032, 1000033, 1000034, 1000035, 1000036,
              1000037, 1000038, 1000039, 1000040, 1000041, 1000042, 1000043, 1000044, 1000045, 1000046, 1000047,
              1000048, 1000049, 1000050, 1000051, 1000052, 1000053, 1000054, 1000055, 1000056, 1000057, 1000058,
              1000059, 1000060, 1000061, 1000062, 1000063, 1000064, 1000065, 1000066, 1000067, 1000068, 1000069,
              1000070, 1000071, 1000072, 1000073, 1000074, 1000075, 1000076, 1000077, 1000078, 1000079, 1000080,
              1000081, 1000082, 1000083, 1000084, 1000085, 1000086, 1000087, 1000089, 1000090, 1000091, 1000092,
              1000093, 1000094, 1000095, 1000096, 1000097, 1000098, 1000099, 1000100, 1000101, 1000102, 1000103,
              1000104, 1000105, 1000106, 1000107, 1000108, 1000109, 1000110, 1000111, 1000112, 1000113, 1000114,
              1000115, 1000116, 1000117, 1000118, 1000119, 1000120, 1000121, 1000122, 1000123, 1000124, 1000125,
              1000126, 1000127, 1000128, 1000130, 1000131, 1000132, 1000133, 1000134, 1000135, 1000136, 1000137,
              1000138, 1000139, 1000140, 1000141, 1000142, 1000143, 1000144, 1000145, 1000146, 1000147, 1000148,
              1000149, 1000150, 1000151, 1000152, 1000153, 1000154, 1000155, 1000156, 1000157, 1000158, 1000159,
              1000160, 1000161, 1000162, 1000163, 1000164, 1000165, 1000166, 1000167, 1000168, 1000169, 1000170,
              1000171, 1000172, 1000173, 1000174, 1000175, 1000176, 1000177, 1000178, 1000179, 1000180, 1000181,
              1000182, 1000183, 1000184, 1000185, 1000186, 1000187, 1000188, 1000189, 1000190, 1000191, 1000192,
              1000193, 1000194, 1000195, 1000196, 1000197, 1000198, 1000199, 1000201, 1000202, 1000203, 1000204,
              1000205, 1000206, 1000207, 1000208, 1000209, 1000210, 1000211, 1000212, 1000213, 1000214, 1000215,
              1000216, 1000217, 1000218, 1000219, 1000220, 1000221, 1000222, 1000223, 1000224, 1000225, 1000226,
              1000227, 1000228]
        res = self.client.get(
            "base/parking/selectById?id=" + str(random.choice(id)), name="根据ID查询车场信息——合法数据")
        if res.status_code != 200:
            print("Response error message is: ", res.text)
        else:
            pass

    @task(1)
    def search_parkingInfo_wrongData(self):
        id = [2000024, 2000027, 2000028, 2000029, 2000030, 2000031, 2000032, 2000033, 2000034, 2000035, 2000036,
              2000037, 2000038, 2000039, 2000040, 2000041, 2000042, 2000043, 2000044, 2000045, 2000046, 2000047,
              2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057, 2000058,
              2000059, 2000060, 2000061, 2000062, 2000063, 2000064, 2000065, 2000066, 2000067, 2000068, 2000069,
              2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076, 2000077, 2000078, 2000079, 2000080,
              2000081, 2000082, 2000083, 2000084, 2000085, 2000086, 2000087, 2000089, 2000090, 2000091, 2000092,
              2000093, 2000094, 2000095, 2000096, 2000097, 2000098, 2000099, 2000100, 2000101, 2000102, 2000103,
              2000104, 2000105, 2000106, 2000107, 2000108, 2000109, 2000110, 2000111, 2000112, 2000113, 2000114,
              2000115, 2000116, 2000117, 2000118, 2000119, 2000120, 2000121, 2000122, 2000123, 2000124, 2000125,
              2000126, 2000127, 2000128, 2000130, 2000131, 2000132, 2000133, 2000134, 2000135, 2000136, 2000137,
              2000138, 2000139, 2000140, 2000141, 2000142, 2000143, 2000144, 2000145, 2000146, 2000147, 2000148,
              2000149, 2000150, 2000151, 2000152, 2000153, 2000154, 2000155, 2000156, 2000157, 2000158, 2000159,
              2000160, 2000161, 2000162, 2000163, 2000164, 2000165, 2000166, 2000167, 2000168, 2000169, 2000170,
              2000171, 2000172, 2000173, 2000174, 2000175, 2000176, 2000177, 2000178, 2000179, 2000180, 2000181,
              2000182, 2000183, 2000184, 2000185, 2000186, 2000187, 2000188, 2000189, 2000190, 2000191, 2000192,
              2000193, 2000194, 2000195, 2000196, 2000197, 2000198, 2000199, 2000201, 2000202, 2000203, 2000204,
              2000205, 2000206, 2000207, 2000208, 2000209, 2000210, 2000211, 2000212, 2000213, 2000214, 2000215,
              2000216, 2000217, 2000218, 2000219, 2000220, 2000221, 2000222, 2000223, 2000224, 2000225, 2000226,
              2000227, 2000228]
        res = self.client.get(
            "base/parking/selectById?id=" + str(random.choice(id)), name='根据ID查询车场信息——不合法数据')
        if res.status_code != 200:
            print("Response error message is: ", res.text)
        else:
            pass

class Basic_Service_Test(FastHttpUser):
    tasks = [Basic_Service]
    min_wait = 1000
    max_wait = 3000
    host = "http://base-service-client.intra.sit.etcp.net/"
